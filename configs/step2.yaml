# default_args is used to include configs from the _modular folder into this config. This ensures a modular way of combining different config files.
# Individual entries of the loaded default args can be changed by simply redefining them as is done below under 'modification of default args'
model_path: 'models/segmentation/model.pth'
default_args: ["configs/_modular/model.yaml", "configs/_modular/dataset_train.yaml", "configs/_modular/sample_generation.yaml"]
generator_data_path: 'data/tuwien_test/input'
#discriminator_dataset_path: 'data/step2_data_for_discriminator/real_pred_dataset/RealPredDataset.pt'
discriminator_dataset_path: 'data/tuwien_test/'

save_full_result: True

grouping:
    tree_conf_thresh: 0.5 # minimum confidence (with regard to semantic prediction) for a point to be predicted as belonging to trees. Only predicted tree points are used during clustering
    tau_vert: 0.6 # minimum verticality for a point to be considered during clustering
    tau_off: 2 # maximum distance from the tree base for a point to be considered during clustering
    tau_group: 0.15 # grouping radius of offset-shifted coordinates for clustering
    tau_min: 100 # After grouping, clusters containing less points than this are discarded immediately since they are deemed to small to be a tree
    training: True # True if dataset used for training; False if used for validation

dataset_test:
  training: False # True if dataset used for training; False if used for validation
  data_root: 'data/tuwien_test/tiles/npz' # folder where tiles for model validation are located
  inner_square_edge_length: 8 # Length of inner square to be used for validation. E.g. if tiles are 30mx30m, this indicates that only inner 8x8 is taken into account

# dataset_train_semi_sup:
#   training: True 
#   data_root: 'data/train_semi_sup/random_crops/npz' # folder where crops for model training are located
#   data_augmentations:
#     jitter: True
#     flip: True
#     rot: True
#     scaled: False
#     point_jitter: False
#   inner_square_edge_length: 8 # Length of inner square to be used for training. E.g. if tiles/crops are 30mx30m, this indicates that only inner 8x8 is taken into account


############ modification default args
model:
  spatial_shape: [500, 500, 1000]

# ############ non-default args
dataloader:
  train:
    batch_size: 2
    num_workers: 2
  test:
    batch_size: 1
    num_workers: 1
  train_semi_sup:
    batch_size: 1
    num_workers: 1
  discriminator:
    batch_size: 1
    num_workers: 1

# optimizer:
#   type: 'AdamW'
#   lr: 0.002
#   weight_decay: 0.001

# scheduler: # learning rate scheduler arguments (see https://timm.fast.ai/schedulers for details)
#   t_initial: 1300
#   lr_min: 0.0001
#   cycle_decay: 1
#   warmup_lr_init: 0.00001
#   warmup_t: 50
#   cycle_limit: 1
#   t_in_epochs: True

# epochs: 3 # number of epochs to train
# examples_per_epoch: 5 # number of crops to use per epoch
# fp16: True # using half precision for network prediction
# pretrain: 'data/model_weights/hais_ckpt_spconv2.pth' # path to pretrained network parameters, set to ~ if not using pretrain
# grad_norm_clip: True # gradient clipping to avoid excessive gradient magnitude

# # validation args
# save_frequency: 20 # save frequency of state dict
# validation_frequency: 1 # validation frequency
